# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
       - image: circleci/node:7.10
      #  - image: docker:17.05.0-ce-git
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)

      - run :
          name :  Install OCI CLI
          command : |
               sudo apt-get install -y libssl-dev libffi-dev python-dev build-essential
               bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)"
      # use a primary image that already has Docker (recommended)
      # or install it during a build like we do here
      
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo chown -R $(whoami) /usr/bin
            mv -f /tmp/docker/* /usr/bin
            docker --version

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
        
      # run tests!
      - run: yarn test

      - run:
          name: Check docker version
          command: |
            docker version
       # build and push Docker image
      - run: 
            name :  Build Docker Image
            command: |
              TAG=0.1.$CIRCLE_BUILD_NUM
              docker login iad.ocir.io -u $DOCKER_USER -p $DOCKER_PASS         # (5)
              docker build -t iad.ocir.io/cloud_pursuit_west/eca-demo:crclci .             # (4)
              docker push iad.ocir.io/cloud_pursuit_west/eca-demo:crclci
      - run:
           name : Install Kubectl
           command: |
                set -x
                k8sversion=v1.8.11
                curl -LO https://storage.googleapis.com/kubernetes-release/release/$k8sversion/bin/linux/amd64/kubectl
                chmod +x ./kubectl
                mv -f kubectl /usr/bin/kubectl
                sed -i -e "s/CERT_DATA/$CERT_DATA/g" kubernetes/config
                sed -i -e "s/TOKEN_DATA/$TOKEN_DATA/g" kubernetes/config
                mkdir -p $HOME/.kube
                cp kubernetes/config $HOME/.kube/config
                kubectl version
      - run:
         name : Deploy to OKE
         command: |
                set -x
                kubectl get nodes
                cat kubernetes/ecadraft1.yaml
                kubectl delete secrets regcred
                kubectl create secret docker-registry regcred --docker-server=iad.ocir.io --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASS  --docker-email=shettyjm@gmail.com || echo 'secret exists'
                kubectl delete deployment kubeproject-v1
                kubectl create -f kubernetes/ecadraft1.yaml --save-config
                sleep 5
                kubectl delete service circlecli-oke-demo
                kubectl expose deployment kubeproject-v1 --type=LoadBalancer --name=circlecli-oke-demo
                sleep 5
                kubectl get svc
                sleep 5
                kubectl get svc
                sleep 5
                kubectl get svc
                sleep 5
      
  #deploy:
     